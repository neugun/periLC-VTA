<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.8.5"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:io="clr-namespace:Bonsai.IO;assembly=Bonsai.System"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns:scr="clr-namespace:Bonsai.Scripting.Expressions;assembly=Bonsai.Scripting.Expressions"
                 xmlns:ard="clr-namespace:Bonsai.Arduino;assembly=Bonsai.Arduino"
                 xmlns:p1="clr-namespace:Neurophotometrics.V2;assembly=Neurophotometrics"
                 xmlns:harp="clr-namespace:Bonsai.Harp;assembly=Bonsai.Harp"
                 xmlns:wie="clr-namespace:Bonsai.Windows.Input;assembly=Bonsai.Windows.Input"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="GroupWorkflow">
        <Name>Pulse Train Logic</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="GroupWorkflow">
              <Name>Is End of Trig Seq</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="BooleanProperty">
                      <Value>false</Value>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="DoubleProperty">
                      <Value>0</Value>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Zip" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:IgnoreElements" />
                  </Expression>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="Name" />
                  </Expression>
                  <Expression xsi:type="rx:BehaviorSubject">
                    <Name>EndOfTrigSeq</Name>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>EndOfTrigSeq</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="2" Label="Source1" />
                  <Edge From="1" To="2" Label="Source2" />
                  <Edge From="2" To="3" Label="Source1" />
                  <Edge From="3" To="5" Label="Source1" />
                  <Edge From="4" To="5" Label="Source2" />
                  <Edge From="4" To="6" Label="Source1" />
                  <Edge From="6" To="7" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="PortName" />
              <Property Name="Lick And Feed Filename" />
              <Property Name="Dist And Speed Filename" />
              <Property Name="Misc. Filename" />
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>Serial Notifications</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="PortName" Category="Serial Comms" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="io:SerialStringRead">
                      <io:PortName>COM4</io:PortName>
                      <io:NewLine>\r\n</io:NewLine>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="GroupWorkflow">
                    <Name>System Timestamp</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="DoubleProperty">
                            <Value>0</Value>
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="rx:IgnoreElements" />
                        </Expression>
                        <Expression xsi:type="ExternalizedMapping">
                          <Property Name="Name" />
                        </Expression>
                        <Expression xsi:type="rx:BehaviorSubject">
                          <Name>Timestamp</Name>
                        </Expression>
                        <Expression xsi:type="SubscribeSubject">
                          <Name>Timestamp</Name>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="1" Label="Source1" />
                        <Edge From="1" To="3" Label="Source1" />
                        <Edge From="2" To="3" Label="Source2" />
                        <Edge From="2" To="4" Label="Source1" />
                        <Edge From="4" To="5" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:WithLatestFrom" />
                  </Expression>
                  <Expression xsi:type="GroupWorkflow">
                    <Name>Lick &amp; Feed Notifications</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="rx:Condition">
                          <Name>Lick or Feed Filter</Name>
                          <Workflow>
                            <Nodes>
                              <Expression xsi:type="WorkflowInput">
                                <Name>Source1</Name>
                              </Expression>
                              <Expression xsi:type="ipy:PythonTransform">
                                <ipy:Script>@returns(bool)
def process(value):
  return "Lick" in value.Item1 or "Feed" in value.Item1</ipy:Script>
                              </Expression>
                              <Expression xsi:type="WorkflowOutput" />
                            </Nodes>
                            <Edges>
                              <Edge From="0" To="1" Label="Source1" />
                              <Edge From="1" To="2" Label="Source1" />
                            </Edges>
                          </Workflow>
                        </Expression>
                        <Expression xsi:type="ipy:PythonTransform">
                          <ipy:Name>Get Event and Count</ipy:Name>
                          <ipy:Script>import System
@returns(System.Tuple[str, str, float])
def process(value):
  infoArr = value.Item1.split(":")
  return System.Tuple.Create(infoArr[0], infoArr[1], value.Item2)</ipy:Script>
                        </Expression>
                        <Expression xsi:type="scr:ExpressionTransform">
                          <scr:Expression>new(
Item1 as Event,
Item2 as Count,
Item3 as SysTime)</scr:Expression>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="1" Label="Source1" />
                        <Edge From="1" To="2" Label="Source1" />
                        <Edge From="2" To="3" Label="Source1" />
                        <Edge From="3" To="4" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="FileName" DisplayName="Lick And Feed Filename" Category="CSV Filenames" />
                  </Expression>
                  <Expression xsi:type="io:CsvWriter">
                    <io:FileName>Bonsai_new\LickAndFeed.csv</io:FileName>
                    <io:Append>false</io:Append>
                    <io:Overwrite>false</io:Overwrite>
                    <io:Suffix>Timestamp</io:Suffix>
                    <io:IncludeHeader>true</io:IncludeHeader>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="GroupWorkflow">
                    <Name>Dist &amp; Speed Notifications</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="rx:Condition">
                          <Name>Dist_Abs Filter</Name>
                          <Workflow>
                            <Nodes>
                              <Expression xsi:type="WorkflowInput">
                                <Name>Source1</Name>
                              </Expression>
                              <Expression xsi:type="ipy:PythonTransform">
                                <ipy:Script>@returns(bool)
def process(value):
  return "Dist_Abs" in value.Item1</ipy:Script>
                              </Expression>
                              <Expression xsi:type="WorkflowOutput" />
                            </Nodes>
                            <Edges>
                              <Edge From="0" To="1" Label="Source1" />
                              <Edge From="1" To="2" Label="Source1" />
                            </Edges>
                          </Workflow>
                        </Expression>
                        <Expression xsi:type="ipy:PythonTransform">
                          <ipy:Name>Get Dist &amp; Speed</ipy:Name>
                          <ipy:Script>import System
@returns(System.Tuple[str, str, str, float])
def process(value):
  infoArr = value.Item1.split(",")
  distAbsArr = infoArr[0].split(":")
  distRelArr = infoArr[1].split(":")
  speedAbsArr = infoArr[2].split(":")
  return System.Tuple.Create(distAbsArr[1], distRelArr[1], speedAbsArr[1], value.Item2)</ipy:Script>
                        </Expression>
                        <Expression xsi:type="scr:ExpressionTransform">
                          <scr:Expression>new(
Item1 as DistAbs,
Item2 as DistRel,
Item3 as SpeedAbs,
Item4 as SysTime)</scr:Expression>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="1" Label="Source1" />
                        <Edge From="1" To="2" Label="Source1" />
                        <Edge From="2" To="3" Label="Source1" />
                        <Edge From="3" To="4" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="FileName" DisplayName="Dist And Speed Filename" Category="CSV Filenames" />
                  </Expression>
                  <Expression xsi:type="io:CsvWriter">
                    <io:FileName>Bonsai_new\DistAndSpeed.csv</io:FileName>
                    <io:Append>false</io:Append>
                    <io:Overwrite>false</io:Overwrite>
                    <io:Suffix>Timestamp</io:Suffix>
                    <io:IncludeHeader>true</io:IncludeHeader>
                  </Expression>
                  <Expression xsi:type="GroupWorkflow">
                    <Name>Misc Notifications</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="rx:Condition">
                          <Name>Misc Filter</Name>
                          <Workflow>
                            <Nodes>
                              <Expression xsi:type="WorkflowInput">
                                <Name>Source1</Name>
                              </Expression>
                              <Expression xsi:type="ipy:PythonTransform">
                                <ipy:Script>@returns(bool)
def process(value):
  return "Dist_Abs" not in value.Item1 and "Lick" not in value.Item1 and "Feed" not in value.Item1</ipy:Script>
                              </Expression>
                              <Expression xsi:type="WorkflowOutput" />
                            </Nodes>
                            <Edges>
                              <Edge From="0" To="1" Label="Source1" />
                              <Edge From="1" To="2" Label="Source1" />
                            </Edges>
                          </Workflow>
                        </Expression>
                        <Expression xsi:type="scr:ExpressionTransform">
                          <scr:Expression>new(
Item1 as Notification,
Item2 as SysTime)</scr:Expression>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="1" Label="Source1" />
                        <Edge From="1" To="2" Label="Source1" />
                        <Edge From="2" To="3" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="FileName" DisplayName="Misc. Filename" Category="CSV Filenames" />
                  </Expression>
                  <Expression xsi:type="io:CsvWriter">
                    <io:FileName>Bonsai_new\MiscNotifications.csv</io:FileName>
                    <io:Append>false</io:Append>
                    <io:Overwrite>false</io:Overwrite>
                    <io:Suffix>Timestamp</io:Suffix>
                    <io:IncludeHeader>true</io:IncludeHeader>
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="3" Label="Source1" />
                  <Edge From="2" To="3" Label="Source2" />
                  <Edge From="3" To="4" Label="Source1" />
                  <Edge From="3" To="8" Label="Source1" />
                  <Edge From="3" To="11" Label="Source1" />
                  <Edge From="4" To="6" Label="Source1" />
                  <Edge From="5" To="6" Label="Source2" />
                  <Edge From="6" To="7" Label="Source1" />
                  <Edge From="8" To="10" Label="Source1" />
                  <Edge From="9" To="10" Label="Source2" />
                  <Edge From="11" To="13" Label="Source1" />
                  <Edge From="12" To="13" Label="Source2" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>Lick Event</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="rx:Condition">
                    <Name>"Lick" Condition</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="ipy:PythonTransform">
                          <ipy:Script>@returns(bool)
def process(value):
  return "Lick1" in value.Event
  #return "Lick0" in value.Event</ipy:Script>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="1" Label="Source1" />
                        <Edge From="1" To="2" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>SysTime</Selector>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="2" To="3" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Opto-Stim Half Period (sec)" Category="Opto-Stim" />
              <Property Name="OptoStimState Filename" Category="CSV Filenames" />
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>OptoStimState</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>Timestamp</Name>
                  </Expression>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="Value" DisplayName="Opto-Stim Half Period (sec)" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="DoubleProperty">
                      <Value>1</Value>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:CombineLatest" />
                  </Expression>
                  <Expression xsi:type="ipy:PythonTransform">
                    <ipy:Script>import System
startTime = -1.0

@returns(System.Tuple[bool, float])
def process(value):
  global startTime

  currentTime = value.Item1
  halfPeriod = value.Item2
  
  if startTime &lt; 0:
    startTime = currentTime

  dt = currentTime - startTime

  if dt &lt; halfPeriod:
    return System.Tuple.Create(True, currentTime)
  elif dt &lt; 2.0*halfPeriod:
    return System.Tuple.Create(False, currentTime)
  else:
    startTime = currentTime
    return System.Tuple.Create(True, currentTime)</ipy:Script>
                  </Expression>
                  <Expression xsi:type="rx:Condition">
                    <Name>Condition: Distinct Until Changed</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Item1</Selector>
                        </Expression>
                        <Expression xsi:type="Disable">
                          <Builder xsi:type="Combinator">
                            <Combinator xsi:type="ard:DigitalOutput">
                              <ard:PortName>COM5</ard:PortName>
                              <ard:Pin>12</ard:Pin>
                            </Combinator>
                          </Builder>
                        </Expression>
                        <Expression xsi:type="ipy:PythonTransform">
                          <ipy:Script>prevState = -1
@returns(bool)
def process(value):
  global prevState
  
  if prevState &lt; 0:
    isChanged = True
  elif prevState == value:
    isChanged = False
  else:
    isChanged = True
  
  prevState = value
  return isChanged</ipy:Script>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="1" Label="Source1" />
                        <Edge From="1" To="2" Label="Source1" />
                        <Edge From="2" To="3" Label="Source1" />
                        <Edge From="3" To="4" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="ExternalizedMapping">
                    <Property Name="FileName" DisplayName="OptoStimState Filename" />
                  </Expression>
                  <Expression xsi:type="io:CsvWriter">
                    <io:FileName>Bonsai_new\OptoStimState.csv</io:FileName>
                    <io:Append>false</io:Append>
                    <io:Overwrite>false</io:Overwrite>
                    <io:Suffix>Timestamp</io:Suffix>
                    <io:IncludeHeader>false</io:IncludeHeader>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="3" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="2" To="3" Label="Source2" />
                  <Edge From="3" To="4" Label="Source1" />
                  <Edge From="4" To="5" Label="Source1" />
                  <Edge From="5" To="7" Label="Source1" />
                  <Edge From="6" To="7" Label="Source2" />
                  <Edge From="7" To="8" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:CombineLatest" />
            </Expression>
            <Expression xsi:type="scr:ExpressionTransform">
              <scr:Expression>new(
Item1.Item1 as IsNoneFrame,
Item1.Item2 as CurrentTime,
Item2 as EventTime,
Item3.Item1 as IsOptoAllowed,
Item3.Item2 as OptoStateTime)</scr:Expression>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="Pulse Train Duration (sec)" Category="Opto-Stim" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="DoubleProperty">
                <Value>1</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:CombineLatest" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Script>startTime = -1

@returns(bool)
def process(value):
  global startTime

  isNoneFrame = value.Item1.IsNoneFrame
  currentTime = value.Item1.CurrentTime
  eventTime = value.Item1.EventTime
  isOptoAllowed = value.Item1.IsOptoAllowed
  optoStateTime = value.Item1.OptoStateTime
  pulseTrainDuration = value.Item2

  
  if not isOptoAllowed:
    return False

  if startTime &lt; 0:
    startTime = eventTime
    return False
  if eventTime - startTime &gt;= pulseTrainDuration:
    startTime = eventTime    
   
  dt = currentTime - startTime

  if dt &gt;= pulseTrainDuration:
    return False

  return isNoneFrame</ipy:Script>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="6" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="6" Label="Source2" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source3" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="10" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source2" />
            <Edge From="10" To="11" Label="Source1" />
            <Edge From="11" To="12" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>Stim Command Generation</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:DistinctUntilChanged" />
            </Expression>
            <Expression xsi:type="rx:Condition">
              <Name>Condition: Start Stim</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="p1:Stimulation">
              <p1:Command>StartFinite</p1:Command>
            </Expression>
            <Expression xsi:type="rx:Condition">
              <Name>Condition: Stop Stim</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="BitwiseNot" />
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="p1:Stimulation">
              <p1:Command>Stop</p1:Command>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Merge" />
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="1" To="4" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="6" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source2" />
            <Edge From="6" To="7" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="p1:FP3002">
          <p1:AcquisitionMode>StartPhotometry</p1:AcquisitionMode>
          <p1:PortName>COM11</p1:PortName>
          <p1:Regions>
            <p1:PhotometryRegion>
              <p1:Index>0</p1:Index>
              <p1:Channel>Red</p1:Channel>
              <p1:Rectangle>
                <p1:Location>
                  <p1:X>223</p1:X>
                  <p1:Y>547</p1:Y>
                </p1:Location>
                <p1:Size>
                  <p1:Width>48</p1:Width>
                  <p1:Height>56</p1:Height>
                </p1:Size>
                <p1:X>223</p1:X>
                <p1:Y>547</p1:Y>
                <p1:Width>48</p1:Width>
                <p1:Height>56</p1:Height>
              </p1:Rectangle>
              <p1:Name>R0</p1:Name>
            </p1:PhotometryRegion>
            <p1:PhotometryRegion>
              <p1:Index>1</p1:Index>
              <p1:Channel>Green</p1:Channel>
              <p1:Rectangle>
                <p1:Location>
                  <p1:X>727</p1:X>
                  <p1:Y>488</p1:Y>
                </p1:Location>
                <p1:Size>
                  <p1:Width>56</p1:Width>
                  <p1:Height>50</p1:Height>
                </p1:Size>
                <p1:X>727</p1:X>
                <p1:Y>488</p1:Y>
                <p1:Width>56</p1:Width>
                <p1:Height>50</p1:Height>
              </p1:Rectangle>
              <p1:Name>G1</p1:Name>
            </p1:PhotometryRegion>
          </p1:Regions>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="p1:PhotometryData">
          <p1:VisualizerSettings>
            <p1:PlotSettings>
              <p1:PlotSetting>
                <p1:PhotometryRegion>
                  <p1:Index>0</p1:Index>
                  <p1:Channel>Red</p1:Channel>
                  <p1:Rectangle>
                    <p1:Location>
                      <p1:X>221</p1:X>
                      <p1:Y>487</p1:Y>
                    </p1:Location>
                    <p1:Size>
                      <p1:Width>48</p1:Width>
                      <p1:Height>56</p1:Height>
                    </p1:Size>
                    <p1:X>221</p1:X>
                    <p1:Y>487</p1:Y>
                    <p1:Width>48</p1:Width>
                    <p1:Height>56</p1:Height>
                  </p1:Rectangle>
                  <p1:Name>R0</p1:Name>
                </p1:PhotometryRegion>
                <p1:IsVisible>false</p1:IsVisible>
                <p1:SignalSettings>
                  <p1:SignalSetting>
                    <p1:Name>L470</p1:Name>
                    <p1:LEDFlag>L470</p1:LEDFlag>
                    <p1:IsVisible>false</p1:IsVisible>
                    <p1:Scaling>
                      <p1:Mode>Auto</p1:Mode>
                      <p1:Min>0</p1:Min>
                      <p1:Max>1</p1:Max>
                    </p1:Scaling>
                  </p1:SignalSetting>
                  <p1:SignalSetting>
                    <p1:Name>L560</p1:Name>
                    <p1:LEDFlag>L560</p1:LEDFlag>
                    <p1:IsVisible>true</p1:IsVisible>
                    <p1:Scaling>
                      <p1:Mode>Auto</p1:Mode>
                      <p1:Min>0</p1:Min>
                      <p1:Max>1</p1:Max>
                    </p1:Scaling>
                  </p1:SignalSetting>
                  <p1:SignalSetting>
                    <p1:Name>L415</p1:Name>
                    <p1:LEDFlag>L415</p1:LEDFlag>
                    <p1:IsVisible>false</p1:IsVisible>
                    <p1:Scaling>
                      <p1:Mode>Auto</p1:Mode>
                      <p1:Min>0</p1:Min>
                      <p1:Max>1</p1:Max>
                    </p1:Scaling>
                  </p1:SignalSetting>
                </p1:SignalSettings>
              </p1:PlotSetting>
              <p1:PlotSetting>
                <p1:PhotometryRegion>
                  <p1:Index>1</p1:Index>
                  <p1:Channel>Green</p1:Channel>
                  <p1:Rectangle>
                    <p1:Location>
                      <p1:X>681</p1:X>
                      <p1:Y>511</p1:Y>
                    </p1:Location>
                    <p1:Size>
                      <p1:Width>56</p1:Width>
                      <p1:Height>50</p1:Height>
                    </p1:Size>
                    <p1:X>681</p1:X>
                    <p1:Y>511</p1:Y>
                    <p1:Width>56</p1:Width>
                    <p1:Height>50</p1:Height>
                  </p1:Rectangle>
                  <p1:Name>G1</p1:Name>
                </p1:PhotometryRegion>
                <p1:IsVisible>true</p1:IsVisible>
                <p1:SignalSettings>
                  <p1:SignalSetting>
                    <p1:Name>L470</p1:Name>
                    <p1:LEDFlag>L470</p1:LEDFlag>
                    <p1:IsVisible>true</p1:IsVisible>
                    <p1:Scaling>
                      <p1:Mode>Auto</p1:Mode>
                      <p1:Min>0</p1:Min>
                      <p1:Max>1</p1:Max>
                    </p1:Scaling>
                  </p1:SignalSetting>
                  <p1:SignalSetting>
                    <p1:Name>L560</p1:Name>
                    <p1:LEDFlag>L560</p1:LEDFlag>
                    <p1:IsVisible>false</p1:IsVisible>
                    <p1:Scaling>
                      <p1:Mode>Auto</p1:Mode>
                      <p1:Min>0</p1:Min>
                      <p1:Max>1</p1:Max>
                    </p1:Scaling>
                  </p1:SignalSetting>
                  <p1:SignalSetting>
                    <p1:Name>L415</p1:Name>
                    <p1:LEDFlag>L415</p1:LEDFlag>
                    <p1:IsVisible>true</p1:IsVisible>
                    <p1:Scaling>
                      <p1:Mode>Auto</p1:Mode>
                      <p1:Min>0</p1:Min>
                      <p1:Max>1</p1:Max>
                    </p1:Scaling>
                  </p1:SignalSetting>
                </p1:SignalSettings>
              </p1:PlotSetting>
            </p1:PlotSettings>
            <p1:Capacity>200</p1:Capacity>
          </p1:VisualizerSettings>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="p1:PhotometryWriter">
          <p1:IncludeRegions>false</p1:IncludeRegions>
          <p1:IncludePlots>false</p1:IncludePlots>
          <p1:IncludeVideo>false</p1:IncludeVideo>
          <p1:FileName>Bonsai_new\FPData.csv</p1:FileName>
          <p1:Suffix>Timestamp</p1:Suffix>
        </Combinator>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>Find End of Trigger Sequence</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Flags</Selector>
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Name>Get LED Flag Byte</ipy:Name>
              <ipy:Script>import System

@returns(System.Byte)
def process(value):
  flags = value
  strFlags = str(flags).split(', ')
  byteLEDFlag = 0
  for strFlag in strFlags:
    if strFlag == "L415":
      byteLEDFlag = byteLEDFlag | 1
    if strFlag == "L470":
      byteLEDFlag = byteLEDFlag | 2
    if strFlag == "L560":
      byteLEDFlag = byteLEDFlag | 4

  return System.Byte(byteLEDFlag)</ipy:Script>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>SystemTimestamp</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source2</Name>
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>Cropped Trig Sequence</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="GroupWorkflow">
                    <Name>GetTrigSeqLen</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="harp:FilterMessage">
                            <harp:Address>64</harp:Address>
                            <harp:MessageType xsi:nil="true" />
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="harp:Parse">
                          <harp:Type>TimestampedU8</harp:Type>
                          <harp:IsArray>false</harp:IsArray>
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Value</Selector>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="1" Label="Source1" />
                        <Edge From="1" To="2" Label="Source1" />
                        <Edge From="2" To="3" Label="Source1" />
                        <Edge From="3" To="4" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="GroupWorkflow">
                    <Name>GetFullTrigSequence</Name>
                    <Workflow>
                      <Nodes>
                        <Expression xsi:type="WorkflowInput">
                          <Name>Source1</Name>
                        </Expression>
                        <Expression xsi:type="Combinator">
                          <Combinator xsi:type="harp:FilterMessage">
                            <harp:Address>63</harp:Address>
                            <harp:MessageType xsi:nil="true" />
                          </Combinator>
                        </Expression>
                        <Expression xsi:type="harp:Parse">
                          <harp:Type>TimestampedU8</harp:Type>
                          <harp:IsArray>true</harp:IsArray>
                        </Expression>
                        <Expression xsi:type="MemberSelector">
                          <Selector>Value</Selector>
                        </Expression>
                        <Expression xsi:type="WorkflowOutput" />
                      </Nodes>
                      <Edges>
                        <Edge From="0" To="1" Label="Source1" />
                        <Edge From="1" To="2" Label="Source1" />
                        <Edge From="2" To="3" Label="Source1" />
                        <Edge From="3" To="4" Label="Source1" />
                      </Edges>
                    </Workflow>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Zip" />
                  </Expression>
                  <Expression xsi:type="ipy:PythonTransform">
                    <ipy:Name>Crop Trig Seq</ipy:Name>
                    <ipy:Script>import System

@returns(System.Array[System.Byte])
def process(value):
  trigSeqLen = value.Item1
  fullTrigSeq = value.Item2

  seqByteArray = bytearray(trigSeqLen)
  
  for i in range(trigSeqLen):
    seqByteArray[i] = fullTrigSeq[i]
  seqSysByteArray = System.Array[System.Byte](seqByteArray)
  return seqSysByteArray</ipy:Script>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="0" To="2" Label="Source1" />
                  <Edge From="1" To="3" Label="Source1" />
                  <Edge From="2" To="3" Label="Source2" />
                  <Edge From="3" To="4" Label="Source1" />
                  <Edge From="4" To="5" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:CombineLatest" />
            </Expression>
            <Expression xsi:type="ipy:PythonTransform">
              <ipy:Script>import System
foundTrigSeq = []

@returns(System.Tuple[bool, float])
def process(value):
  global foundTrigSeq
  currentTrig = value.Item1.Item1
  currentTime = value.Item1.Item2
  trigSequence = value.Item2

  # First Frame edge case
  if currentTrig == 7:
    return System.Tuple.Create(False, currentTime)
  
  # Fill array until matches length of actual trig sequence
  if len(foundTrigSeq) &lt; len(trigSequence):
    foundTrigSeq.append(currentTrig)
    pyTrigSeq = list(trigSequence)
    pyTrigSeq = pyTrigSeq[-1:]+pyTrigSeq[:-1]
    return System.Tuple.Create(foundTrigSeq == pyTrigSeq, currentTime)
  else:
    foundTrigSeq.pop(0)
    foundTrigSeq.append(currentTrig)
    pyTrigSeq = list(trigSequence)     
    pyTrigSeq = pyTrigSeq[-1:]+pyTrigSeq[:-1]
    return System.Tuple.Create(foundTrigSeq == pyTrigSeq, currentTime)</ipy:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:DistinctUntilChanged" />
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="0" To="3" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="4" Label="Source1" />
            <Edge From="3" To="4" Label="Source2" />
            <Edge From="4" To="7" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source2" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="MulticastSubject">
        <Name>EndOfTrigSeq</Name>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>Publish Timestamp</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="p1:Photodiodes" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>SystemTimestamp</Selector>
            </Expression>
            <Expression xsi:type="MulticastSubject">
              <Name>Timestamp</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="p1:DigitalIOs">
          <p1:Input0>false</p1:Input0>
          <p1:Input1>false</p1:Input1>
          <p1:Output0>false</p1:Output0>
          <p1:Output1>true</p1:Output1>
        </Combinator>
      </Expression>
      <Expression xsi:type="io:CsvWriter">
        <io:FileName>Bonsai_new\LaserState.csv</io:FileName>
        <io:Append>false</io:Append>
        <io:Overwrite>false</io:Overwrite>
        <io:Suffix>Timestamp</io:Suffix>
        <io:IncludeHeader>true</io:IncludeHeader>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>Serial Commands</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Filter" DisplayName="Behav_PUMP_2p Key" Category="KeyFilters" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>V</wie:Filter>
                <wie:SuppressRepetitions>true</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>V</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Filter" DisplayName="Detach Pump Key" Category="KeyFilters" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>D</wie:Filter>
                <wie:SuppressRepetitions>true</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>D</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Filter" DisplayName="Attach Pump Key" Category="KeyFilters" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>A</wie:Filter>
                <wie:SuppressRepetitions>true</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>A</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Filter" DisplayName="Mount Start Trigger Key" Category="KeyFilters" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>T</wie:Filter>
                <wie:SuppressRepetitions>true</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>T</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Filter" DisplayName="Unmount Start Trigger Key" Category="KeyFilters" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>U</wie:Filter>
                <wie:SuppressRepetitions>true</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>U</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Filter" DisplayName="Reset Key" Category="KeyFilters" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>R</wie:Filter>
                <wie:SuppressRepetitions>true</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>R</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Filter" DisplayName="Reset Pump Timers Key" Category="KeyFilters" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>P</wie:Filter>
                <wie:SuppressRepetitions>true</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>P</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Filter" DisplayName="MtMsg = 1 Key" Category="KeyFilters" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>E</wie:Filter>
                <wie:SuppressRepetitions>true</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>E</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Filter" DisplayName="MtMsg = 18 Key" Category="KeyFilters" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="wie:KeyDown">
                <wie:Filter>X</wie:Filter>
                <wie:SuppressRepetitions>true</wie:SuppressRepetitions>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>X</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Merge" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="PortName" Category="Serial Comms" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="io:SerialStringWrite">
                <io:PortName>COM4</io:PortName>
                <io:NewLine>\r\n</io:NewLine>
              </Combinator>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Timestamp</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:WithLatestFrom" />
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="27" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="27" Label="Source2" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="27" Label="Source3" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
            <Edge From="11" To="27" Label="Source4" />
            <Edge From="12" To="13" Label="Source1" />
            <Edge From="13" To="14" Label="Source1" />
            <Edge From="14" To="27" Label="Source5" />
            <Edge From="15" To="16" Label="Source1" />
            <Edge From="16" To="17" Label="Source1" />
            <Edge From="17" To="27" Label="Source6" />
            <Edge From="18" To="19" Label="Source1" />
            <Edge From="19" To="20" Label="Source1" />
            <Edge From="20" To="27" Label="Source7" />
            <Edge From="21" To="22" Label="Source1" />
            <Edge From="22" To="23" Label="Source1" />
            <Edge From="23" To="27" Label="Source8" />
            <Edge From="24" To="25" Label="Source1" />
            <Edge From="25" To="26" Label="Source1" />
            <Edge From="26" To="27" Label="Source9" />
            <Edge From="27" To="29" Label="Source1" />
            <Edge From="28" To="29" Label="Source2" />
            <Edge From="29" To="31" Label="Source1" />
            <Edge From="30" To="31" Label="Source2" />
            <Edge From="31" To="32" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="io:CsvWriter">
        <io:FileName>Bonsai_new\SerialCmds2.csv</io:FileName>
        <io:Append>false</io:Append>
        <io:Overwrite>false</io:Overwrite>
        <io:Suffix>Timestamp</io:Suffix>
        <io:IncludeHeader>true</io:IncludeHeader>
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="2" To="5" Label="Source2" />
      <Edge From="2" To="7" Label="Source1" />
      <Edge From="2" To="8" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="3" To="5" Label="Source1" />
      <Edge From="5" To="6" Label="Source1" />
      <Edge From="8" To="9" Label="Source1" />
      <Edge From="10" To="11" Label="Source1" />
    </Edges>
  </Workflow>
</WorkflowBuilder>